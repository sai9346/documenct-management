{"ast":null,"code":"// src/services/api.ts\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst mockDocuments = [\n  // ... populate with some mock data\n];\nexport const api = {\n  uploadDocuments: async (files, isPublic, userId) => {\n    await delay(1000); // Simulate network delay\n    const newDocuments = files.map(file => ({\n      id: Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      isPublic,\n      uploadedBy: userId,\n      uploadedAt: new Date(),\n      url: URL.createObjectURL(file)\n    }));\n    mockDocuments.push(...newDocuments);\n    return newDocuments;\n  },\n  getDocuments: async (userId, isPublic, search = '', page = 1, limit = 10) => {\n    await delay(500); // Simulate network delay\n    let filtered = mockDocuments.filter(doc => doc.isPublic === isPublic || doc.uploadedBy === userId);\n    if (search) {\n      filtered = filtered.filter(doc => doc.name.toLowerCase().includes(search.toLowerCase()));\n    }\n    const total = filtered.length;\n    const start = (page - 1) * limit;\n    const end = start + limit;\n    return {\n      documents: filtered.slice(start, end),\n      total\n    };\n  }\n};","map":{"version":3,"names":["delay","ms","Promise","resolve","setTimeout","mockDocuments","api","uploadDocuments","files","isPublic","userId","newDocuments","map","file","id","Math","random","toString","substr","name","uploadedBy","uploadedAt","Date","url","URL","createObjectURL","push","getDocuments","search","page","limit","filtered","filter","doc","toLowerCase","includes","total","length","start","end","documents","slice"],"sources":["D:/Nxtwave/solace/document-management/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\r\nimport { Document } from '../types/Document';\r\n\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst mockDocuments: Document[] = [\r\n  // ... populate with some mock data\r\n];\r\n\r\nexport const api = {\r\n  uploadDocuments: async (files: File[], isPublic: boolean, userId: string): Promise<Document[]> => {\r\n    await delay(1000); // Simulate network delay\r\n    const newDocuments: Document[] = files.map(file => ({\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      name: file.name,\r\n      isPublic,\r\n      uploadedBy: userId,\r\n      uploadedAt: new Date(),\r\n      url: URL.createObjectURL(file)\r\n    }));\r\n    mockDocuments.push(...newDocuments);\r\n    return newDocuments;\r\n  },\r\n\r\n  getDocuments: async (userId: string, isPublic: boolean, search: string = '', page: number = 1, limit: number = 10): Promise<{ documents: Document[], total: number }> => {\r\n    await delay(500); // Simulate network delay\r\n    let filtered = mockDocuments.filter(doc => doc.isPublic === isPublic || doc.uploadedBy === userId);\r\n    if (search) {\r\n      filtered = filtered.filter(doc => doc.name.toLowerCase().includes(search.toLowerCase()));\r\n    }\r\n    const total = filtered.length;\r\n    const start = (page - 1) * limit;\r\n    const end = start + limit;\r\n    return { documents: filtered.slice(start, end), total };\r\n  }\r\n};"],"mappings":"AAAA;;AAGA,MAAMA,KAAK,GAAIC,EAAU,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAE7E,MAAMI,aAAyB,GAAG;EAChC;AAAA,CACD;AAED,OAAO,MAAMC,GAAG,GAAG;EACjBC,eAAe,EAAE,MAAAA,CAAOC,KAAa,EAAEC,QAAiB,EAAEC,MAAc,KAA0B;IAChG,MAAMV,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAMW,YAAwB,GAAGH,KAAK,CAACI,GAAG,CAACC,IAAI,KAAK;MAClDC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3CC,IAAI,EAAEN,IAAI,CAACM,IAAI;MACfV,QAAQ;MACRW,UAAU,EAAEV,MAAM;MAClBW,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC;MACtBC,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACZ,IAAI;IAC/B,CAAC,CAAC,CAAC;IACHR,aAAa,CAACqB,IAAI,CAAC,GAAGf,YAAY,CAAC;IACnC,OAAOA,YAAY;EACrB,CAAC;EAEDgB,YAAY,EAAE,MAAAA,CAAOjB,MAAc,EAAED,QAAiB,EAAEmB,MAAc,GAAG,EAAE,EAAEC,IAAY,GAAG,CAAC,EAAEC,KAAa,GAAG,EAAE,KAAwD;IACvK,MAAM9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClB,IAAI+B,QAAQ,GAAG1B,aAAa,CAAC2B,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACxB,QAAQ,KAAKA,QAAQ,IAAIwB,GAAG,CAACb,UAAU,KAAKV,MAAM,CAAC;IAClG,IAAIkB,MAAM,EAAE;MACVG,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACd,IAAI,CAACe,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC,CAAC;IAC1F;IACA,MAAME,KAAK,GAAGL,QAAQ,CAACM,MAAM;IAC7B,MAAMC,KAAK,GAAG,CAACT,IAAI,GAAG,CAAC,IAAIC,KAAK;IAChC,MAAMS,GAAG,GAAGD,KAAK,GAAGR,KAAK;IACzB,OAAO;MAAEU,SAAS,EAAET,QAAQ,CAACU,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;MAAEH;IAAM,CAAC;EACzD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}